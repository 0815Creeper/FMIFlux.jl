#
# Copyright (c) 2021 Tobias Thummerer, Lars Mikelsons
# Licensed under the MIT license. See LICENSE file in the project root for details.
#

import Pkg;
Pkg.develop(path = joinpath(@__DIR__, "../../FMIFlux.jl"));
using Documenter, FMIFlux
using Documenter: GitHubActions
using Suppressor

example_pages = [
    "Overview" => joinpath("examples", "overview.md"),
    "Simple CS-NeuralFMU" => joinpath("examples", "simple_hybrid_CS.md"),
    "Simple ME-NeuralFMU" => joinpath("examples", "simple_hybrid_ME.md"),
    "Growing Horizon ME-NeuralFMU" => joinpath("examples", "growing_horizon_ME.md"),
    "JuliaCon 2023" => joinpath("examples", "juliacon_2023.md"),
    "MDPI 2022" => joinpath("examples", "mdpi_2022.md"),
    "Modelica Conference 2021" => joinpath("examples", "modelica_conference_2021.md"),
    "Pluto Workshops" => joinpath("examples", "workshops.md"),
]

#check if all md files in examples are included in docs
for md in readdir(joinpath("docs", "src", "examples"))
    if endswith(md, ".md") &&
       !occursin("README", md) &&
       all([!endswith(file, md) for (x, file) in example_pages])
        print(
            string(
                "::warning title=Example-Warning::example \"",
                md,
                "\" is not included in the doc-manual\r\n",
            ),
        )
    end
end

#remove any example pages, for witch the example can not be found
# and remove svgs if md building failed
for (x, md) in deepcopy(example_pages)
    # check if file is missing
    if !(any([occursin(file, md) for file in readdir(joinpath("docs", "src", "examples"))]))
        print(
            string(
                "::warning title=Example-Warning::example-page \"",
                md,
                "\" is to be included in the doc-manual, but could not be found on the examples branch or in \"docs/src/examples\"\r\n",
            ),
        )
        filter!(e -> e â‰  (x => md), example_pages)
    else
        # removal of svgs is here if there is xml data in the md
        r = open(joinpath("docs", "src", md), "r")
        s = read(r, String)
        close(r)
        if occursin("<svg", s) && occursin("</svg>", s)
            print(
                string(
                    "::warning title=SVG-Warning::example-page \"",
                    md,
                    "\" has svg-xml text in it. Most likely, linking of support-files generated by jupyter is broken\"\r\n",
                ),
            )
            # regex replace exeeds stack limit: s = replace(s, r"\<\?xml(?!<\/svg>)(.|\n)*?<\/svg>" => "")
            # so take iterative approach:
            while occursin("<?xml", s) && occursin("</svg>", s)
                a = findfirst("<?xml", s)[1] - 1
                b = findfirst("</svg>", s)[end] + 1
                s = string(s[1:a], s[b:end])
            end
            w = open(joinpath("docs", "src", md * "tmp"), "w+")
            write(w, s)
            close(w)
        end
        if isfile(joinpath("docs", "src", md * "tmp"))
            mv(
                joinpath("docs", "src", md * "tmp"),
                joinpath("docs", "src", md),
                force = true,
            )
        end
    end
end

my_makedocs() = makedocs(
    sitename = "FMIFlux.jl",
    format = Documenter.HTML(
        collapselevel = 1,
        sidebar_sitename = false,
        edit_link = nothing,
        size_threshold = 512000,
        size_threshold_ignore = [
        ],
    ),
    modules = [FMIFlux],
    checkdocs = :exports,
    linkcheck = true,
    warnonly = :linkcheck,
    pages = Any[
        "Introduction" => "index.md"
        "FAQ" => "faq.md"
        "Examples" => example_pages
        "Library Functions" => "library.md"
        "Related Publication" => "related.md"
        "Contents" => "contents.md"
    ],
)

function deployConfig()
    github_repository = get(ENV, "GITHUB_REPOSITORY", "")
    github_event_name = get(ENV, "GITHUB_EVENT_NAME", "")
    if github_event_name == "workflow_run" || github_event_name == "repository_dispatch"
        github_event_name = "push"
    end
    github_ref = get(ENV, "GITHUB_REF", "")
    return GitHubActions(github_repository, github_event_name, github_ref)
end

output = ""
try
    global output = @capture_err begin
        my_makedocs()
    end
catch e
    my_makedocs() # if it fails, re-run without capturing, so that its stderr appears in the console/logs
end

# errors = findall(r"Error:.*", output)
warns = findall(r"Warning:.*", output)

for w in warns
    s = string("::warning title=Documenter-Warning::", output[w], "\r\n")
    print(s)
end

deploydocs(
    repo = string("github.com/", get(ENV, "GITHUB_REPOSITORY", ""), "git"),
    devbranch = "main",
    deploy_config = deployConfig(),
)
